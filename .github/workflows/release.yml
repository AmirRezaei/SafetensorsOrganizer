name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*' # This triggers the workflow on new tags
  workflow_dispatch: # This allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Set a reasonable timeout to control costs
    strategy:
      matrix:
        configuration: [Release]
        runtime: [win-x86, linux-x64, osx-x64]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }}

    - name: Test
      run: dotnet test --configuration ${{ matrix.configuration }}

    - name: Publish
      run: |
        if [ $RUNNER_OS = 'Windows' ]; then \
          dotnet publish -c ${{ matrix.configuration }} -r ${{ matrix.runtime }} --self-contained true /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:PublishTrimmed=true -o ./output; \
        else \
          dotnet publish -c ${{ matrix.configuration }} -r ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishTrimmed=true -o ./output; \
        fi

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Release
        path: ./output

    - name: Set build outputs
      id: set_outputs
      run: |
        echo "::set-output name=runtime::${{ matrix.runtime }}"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: Release
        path: ./release

    - name: Extract Tag Name
      id: extract_tag
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
        else
          TAG_NAME=$(date +'%Y%m%d%H%M%S')
        fi
        echo "::set-output name=tag;${TAG_NAME}"
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_tag.outputs.tag }}
        release_name: Release ${{ steps.extract_tag.outputs.tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release
        asset_name: your_console_app_${{ needs.build.outputs.runtime }}.zip
        asset_content_type: application/zip
